version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.5.0
  

jobs:
  build_and_push_caris_caller_image:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
          aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
          create-repo: false
          dockerfile: ./carisbatch/Dockerfile
          path: ./carisbatch/
          region: AWS_REGION_ENV_VAR_NAME
          repo: callcarisbatch
          tag: 'caris_caller_image-latest'
  build_tomcat_push_jar:
    working_directory: ~/ausseabed-processing-pipeline
    docker:
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - checkout
      - run:
          name: Check Scripts
          command: find . 
      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: circleci-tomcat-push-{{ checksum "./geoserver/ausseabed.pipeline/pom.xml" }}
      - run: 
          working_directory: ./geoserver/ausseabed.pipeline/
          command: mvn dependency:go-offline # gets the project dependencies
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: circleci-tomcat-push-{{ checksum "./geoserver/ausseabed.pipeline/pom.xml" }}
      - run: 
          working_directory: ./geoserver/ausseabed.pipeline/
          command: mvn package # run the actual tests
      - store_artifacts: # store the uberjar as an artifact
      # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: ./geoserver/ausseabed.pipeline/target/ausseabed.pipeline-1.0-SNAPSHOT.jar
      - persist_to_workspace:
          root: ./geoserver/ausseabed.pipeline/target/
          path: ausseabed.pipeline-1.0-SNAPSHOT.jar

  build_and_push_geoserver_image:
    requires:
      - build_tomcat_push_jar
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - attach_workspace:
          at: ./geoserver/ausseabed.pipeline/target/
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
          aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
          create-repo: false
          dockerfile: ./geoserver/Dockerfile
          path: ./geoserver/
          checkout: false
          region: AWS_REGION_ENV_VAR_NAME
          repo: callcarisbatch
          extra-build-args: '--build-arg COMMUNITY_MODULES=true --build-arg GS_VERSION=2.16.1'
          tag: 'ausseabed-geoserver-2.16.1' 
  build_and_push_startstopec2_image:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
          aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
          create-repo: false
          dockerfile: ./startstopec2/Dockerfile
          path: ./startstopec2/
          region: AWS_REGION_ENV_VAR_NAME
          repo: callcarisbatch
          tag: 'startstopec2_image-latest'
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
          aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
          create-repo: false
          dockerfile: ./gdal/Dockerfile
          path: ./gdal/
          region: AWS_REGION_ENV_VAR_NAME
          repo: callcarisbatch
          tag: 'gdal_image-latest'
  build_and_push_geoserver_with_s3_image:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - run:
          name: Download kartoza/geoserver
          command: git clone git://github.com/kartoza/docker-geoserver
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
          aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
          checkout: false
          create-repo: false
          dockerfile: ./docker-geoserver/Dockerfile
          path: ./docker-geoserver/
          extra-build-args: '--build-arg COMMUNITY_MODULES=true --build-arg GS_VERSION=2.16.1'
          region: AWS_REGION_ENV_VAR_NAME
          repo: callcarisbatch
          tag: 'kartoza-geoserver-with-plugin-2.16.1'        
  deploy:
    docker:
      - image: circleci/python:3.7-stretch
    steps:
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: check s3
          command: aws sts get-caller-identity
      - checkout
      - run:
          name: Install terraform
          command: wget https://releases.hashicorp.com/terraform/0.12.17/terraform_0.12.17_linux_amd64.zip && unzip terraform_0.12.17_linux_amd64.zip && chmod +x terraform && sudo mv terraform /usr/bin/
      - run:
          name: terraform init
          working_directory: ./infra
          command: pwd && echo $CIRCLE_WORKING_DIRECTORY && terraform init
      - run:
          name: terraform plan
          working_directory: ./infra
          command: terraform plan 
      - run:
          name: terraform apply 
          working_directory: ./infra
          command: terraform apply --auto-approve
      
    

workflows:
  update_infra_and_application:
    jobs:
      - build_tomcat_push_jar
      - build_and_push_geoserver_image
      - build_and_push_caris_caller_image
      - build_and_push_startstopec2_image
      - deploy:
          requires:
            - build_and_push_caris_caller_image
            - build_and_push_startstopec2_image
            - build_and_push_geoserver_image
            - build_tomcat_push_jar
  build_geoserver_image:            
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only: master
    jobs:
      - build_and_push_geoserver_with_s3_image
  